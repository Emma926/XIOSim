licenses(["notice"]) # Intel open source

PIN_PATH = "pin-2.14-71313-gcc.4.4.7-linux"
XED_PATH = PIN_PATH + "/extras/xed-%s/"

cc_library(
    visibility = ["//visibility:public"],
    name = "xed",
    hdrs = select({
        ":k8" : [ XED_PATH % "intel64" + "include/xed-interface.h"],
        ":piii" : [ XED_PATH % "ia32" + "include/xed-interface.h"],
    }),
    includes = select({
        ":k8" : [ XED_PATH % "intel64" + "include"],
        ":piii" : [ XED_PATH % "ia32" + "include"],
    }),
    srcs = select({
        ":k8" : glob([
                XED_PATH % "intel64" + "lib/libxed.a",
                XED_PATH % "intel64" + "include/*.h"
            ]),
        ":piii" : glob([
                XED_PATH % "ia32" + "lib/libxed.a",
                XED_PATH % "ia32" + "include/*.h"
            ]),
    }),
)

cc_library(
    visibility = ["//visibility:public"],
    name = "pin",
    hdrs =  glob([
        PIN_PATH + "/source/include/pin/pin.H",
        # Everything below belongs in srcs, but bazel doesn't like the
        # non-standard header extensions there.
        PIN_PATH + "/source/include/pin/*.h",
        PIN_PATH + "/source/include/pin/*.H",
        PIN_PATH + "/source/include/pin/*.PLH",
        PIN_PATH + "/source/include/pin/gen/*.hpp",
        PIN_PATH + "/source/include/pin/gen/*.CVH",
        PIN_PATH + "/source/include/pin/gen/*.PH",
        PIN_PATH + "/source/include/pin/gen/*.TLH",
        PIN_PATH + "/extras/components/include/**/*.h",
        PIN_PATH + "/extras/components/include/**/*.hpp",
    ]),
    includes = [
        PIN_PATH + "/source/include/pin",
        PIN_PATH + "/source/include/pin/gen",
        PIN_PATH + "/extras/components/include",
        PIN_PATH + "/source/tools/InstLib",
    ],
    defines = select({
        ":k8" : [ "TARGET_IA32E", "HOST_IA32E", "TARGET_LINUX" ],
        ":piii" : [ "TARGET_IA32", "HOST_IA32", "TARGET_LINUX" ],
    }),
    srcs = select({
        ":k8" : [PIN_PATH + "/intel64/lib/libpin.a"],
        ":piii" : [PIN_PATH + "/ia32/lib/libpin.a"],
    }) + [":weak_pindwarf"],
)

filegroup(
    name = "pin_bin",
    srcs = select({
        ":k8" : [ PIN_PATH + "/intel64/bin/pinbin" ],
        ":piii" : [ PIN_PATH + "/ia32/bin/pinbin" ],
    }),
)

load("@//third_party/pin:weaken.bzl", "cc_weaken")
# libpindwarf.a contains a few symbols from libstdc++ (which are byte-for-byte
# equivalent). When we link libstc++ statically, they clash.
# So, we'll patch libpindwarf to make these weak.
cc_weaken(
    name = "weak_pindwarf",
    srcs = select({
        "k8" : PIN_PATH + "/intel64/lib-ext/libpindwarf.a",
        "piii" : PIN_PATH + "/ia32/lib-ext/libpindwarf.a",
    }),
    symbols = [
        "_ZNSt14error_categoryD0Ev",
        "_ZNSt14error_categoryD1Ev",
        "_ZNSt14error_categoryD2Ev",
        "_ZNKSt14error_category23default_error_conditionEi",
        "_ZNKSt14error_category10equivalentERKSt10error_codei",
        "_ZNKSt14error_category10equivalentEiRKSt15error_condition",
        "_ZSt15system_categoryv",
        "_ZSt16generic_categoryv",
    ],
)


# We want symlinks instead of copying, but
# "Bazel doesn't copy over the directory/symlink structure created by genrules"
genrule(
    visibility = ["//visibility:public"],
    name = "cp_pinbin",
    outs = [ "pinbin" ],
    srcs = [
        ":pin_bin"
    ],
    cmd = "OUT_DIR=$$(dirname $(OUTS));" +
        "cp $(location :pin_bin) $${OUT_DIR}/",
    output_to_bindir = 1,
)

config_setting(
    name = "k8",
    values = { "cpu" : "k8" }
)

config_setting(
    name = "piii",
    values = { "cpu" : "piii" }
)
