# Zesto configuration file.
#
# All options are populated with their default values and do not represent any
# real system.

# Global settings about the system and the simulation.
system_cfg {
  debug = false                  # Enable debugging messages. Build with -DDEBUG
  seed = 1                       # Random number generator seed
  num_cores = 1                  # Number of cores in the system.
  heartbeat_interval = 0         # Print out simulator heartbeat every x cycles.
  pipeline_model = "DPM"         # Pipeline model.
  ztrace_file_prefix = "ztrace"  # Zesto trace filename prefix.
  # TODO: Move the next three into their own power section.
  simulate_power = false         # Simulate power.
  power_rtp_interval = 0         # uncore cycles between power computations.
  power_rtp_file = ""            # Runtime power file.
  output_redir = NULL            # Redirect simulator output.
}

# Core configuration.
core_cfg {
  # CPU clock frequency (originally in zesto-uncore.cpp...)
  core_clock = 4000.0

  # Instruction fetch settings.
  fetch_cfg {
    # Size of instruction queue (macro ops), placed between predecode and
    # decode.
    instruction_queue_size = 8

    # Caches consist of the cache itself, a TLB, a prefetcher, and a coherency
    # controller.
    icache_cfg icache {
      # General cache settings - size, associativity, line size, etc.
      config = "IL1:64:8:64:4:16:3:L:8"
      # Cache coherency controller configuration.
      coherency_controller = "none"

      iprefetch_cfg inst_pf {
        config = {"nextline"}        # 1st-level icache prefetcher configuration
        on_miss_only = true          # icache prefetch on miss only
        fifosize = 8                 # Prefetch FIFO size (TODO: units?)
        buffer = 0                   # Prefetch buffer size.
        filter = 0                   # Prefetch filter size.
        filter_reset = 65536         # Prefetch filter reset interval (cycles).
        # Prefetch threshold - only prefetch if MSHR occupancy is less than
        # this.
        threshold = 4
        # Maximum instruction prefetch requests in the MSHR
        max_outstanding_requests = 2
        # Sampling interval (cycles) for prefetch control. 0 = no PF controller.
        watermark_sampling_interval = 100
        # Minimum watermark - always prefetch if lower than this.
        watermark_min = 0.1
        # Maximum watermark - never prefetch if above this.
        watermark_max = 0.3
      }

      itlb_cfg itlb {
        # Instruction ITLB configuration.
        config = "ITLB:32:4:1:3:L:1"
        # Coherency controller.
        coherency_controller = "none"
      }
    }

    branch_pred_cfg {
      # bpred configuration(s)
      type = {"2lev:gshare:1:1024:6:1"}
      # fusion algorithm for hybrid 2nd-level bpred
      fusion = "none"
      # branch target buffer configuration
      btb = "btac:BTB:1024:4:8:l"
      # indirect branch target buffer configuration
      ibtb = "none"
      # return address stack predictor configuration
      ras = "stack:RAS:16"
      # additional latency from branch-exec to jeclear
      jump_exec_delay = 1
    }

    byte_queue_cfg {
      # Number of entries.
      size = 4
      # Bytes per line.
      line_size = 16
    }

    predecode_cfg {
      # Number of stages in the predecode pipe.
      depth = 2
      # Width of predecode pipeline (macro-ops)
      width = 4
    }
  }

  decode_cfg {
    # Pipeline depth in stages.
    depth = 3
    # Width of pipeline in macro-ops.
    width = 4
    # stage of branch agen ("targetstage").
    branch_agen_stage = 1
    # Maximum branches decoded per cycle.
    branch_decode_limit = 1
    # maximum uops generated for each decoder (e.g., 4 1 1)
    decoder_max_uops = {4, 1, 1, 1}
    # Latency to access micro-code sequencer.
    ucode_sequencer_latency = 0
    # Number of entries in uop queue.
    uop_queue_size = 8

    # Enable/disable uop fusion rules.
    uop_fusion_cfg {
      # Disable all uop fusion rules.
      disable_all = false
      # Enable all uop fusion rules.
      enable_all = false
      # Fuse the load op with the next computation op.
      load_comp_op = false
      # Fuse the load op with the next fp op.
      fpload_comp_op = false
      # Store address generate - store op.
      sta_std = false
      # Partial register write combining uops.
      partial_reg_write = false
      # Load-store op fusion.
      load_op_store = false
    }
  }

  # Alloc = dispatch
  alloc_cfg {
    # Pipeline depth (stages).
    depth = 2
    # Pipeline width (uops).
    width = 4
    # use drain-flush after misprediction
    use_drain_flush = false
  }

  exec_cfg {
    # Maximum issues from RS per cycle (equal to num exec ports).
    width = 4
    # Number of cycles for payload RAM access (schedule to exec delay).
    payload_depth = 1
    # Enable heuristic tornado breaker.
    enable_tornado_breaker = false
    # Enable load issue throttling on partial matches.
    enable_partial_throttle = true
    # Latency to forward results to FP cluster (cycles).
    fp_forward_penalty = 0
    # Memory dependence predictor configuration.
    mem_dep_pred_config = "lwt:LWT:4096:13107"

    # Number of reservation station entries.
    rs_size = 20
    # Number of load queue entries.
    loadq_size = 20
    # Number of store queue entries.
    storeq_size = 16

    dcache_cfg dcache {
      config = "DL1:64:8:64:8:64:2:L:W:T:8:C"
      mshr_cmd = "RWPB"
      coherency_controller = "none"

      dtlb_cfg dtlb {
        config = "DTLB:4:4:1:2:L:4"
        coherency_controller = "none"
      }

      d2tlb_cfg d2tlb {
        config = "none"
        coherency_controller = "none"
      }

      dprefetch_cfg data_pf {
        # 1st-level dcache prefetcher configuration
        config = {"nextline"}
        on_miss_only = false         # dcache prefetch on miss only
        fifosize = 8                 # Prefetch FIFO size (TODO: units?)
        buffer = 0                   # Prefetch buffer size.
        filter = 0                   # Prefetch filter size.
        filter_reset = 65536         # Prefetch filter reset interval (cycles).
        threshold = 4                # Prefetch threshold.
        # Maximum instruction prefetch requests in the MSHR
        max_outstanding_requests = 2
        # Sampling interval (cycles) for prefetch control. 0 = no PF controller.
        watermark_sampling_interval = 100
        # Minimum watermark - always prefetch if lower than this.
        watermark_min = 0.3
        # Maximum watermark - never prefetch if above this.
        watermark_max = 0.7
      }
    }

    l2cache_cfg L2 {
      config = "DL2:512:8:64:8:64:9:L:W:T:8:C"
      mshr_cmd = "RPWB"
      coherency_controller = "none"

      l2prefetch_cfg l2_pf {
        config = {"nextline"}
        on_miss_only = true          # dcache prefetch on miss only
        fifosize = 8                 # Prefetch FIFO size (TODO: units?)
        buffer = 0                   # Prefetch buffer size.
        filter = 0                   # Prefetch filter size.
        filter_reset = 65536         # Prefetch filter reset interval (cycles).
        threshold = 4                # Prefetch threshold.
        # Maximum instruction prefetch requests in the MSHR
        max_outstanding_requests = 2
        # Sampling interval (cycles) for prefetch control. 0 = no PF controller.
        watermark_sampling_interval = 100
        # Minimum watermark - always prefetch if lower than this.
        watermark_min = 0.3
        # Maximum watermark - never prefetch if above this.
        watermark_max = 0.7
      }
    }

    # RingCache settings.
    repeater_cfg {
      # RingCache configuration (originally in zesto-repeater).
      config = "none"
      # Send request to L1 in parallel with the repeater.
      request_dl1 = false
    }

    exeu int_alu {
      latency = 1  # Execution latency.
      rate = 1  # Issue rate.
      port_binding = {0, 1}  # Port bindings.
    }

    exeu jump {
      latency = 1
      rate = 1
      port_binding = {0}
    }

    exeu int_mul {
      latency = 4
      rate = 1
      port_binding = {2}
    }

    exeu int_div {
      latency = 13
      rate = 13
      port_binding = {2}
    }

    exeu shift {
      latency = 1
      rate = 1
      port_binding = {0}
    }

    exeu fp_alu {
      latency = 3
      rate = 1
      port_binding = {0}
    }

    exeu fp_mul {
      latency = 5
      rate = 2
      port_binding = {1}
    }

    exeu fp_div {
      latency = 32
      rate = 24
      port_binding = {2}
    }

    exeu fp_cplx {
      latency = 58
      rate = 58
      port_binding = {2}
    }

    # This is FU_LD in the code.
    exeu ld {
      latency = 1
      rate = 1
      port_binding = {1}
    }

    exeu st_agen {
      latency = 1
      rate = 1
      port_binding = {2}
    }

    exeu st_data {
      latency = 1
      rate = 1
      port_binding = {3}
    }

    # Originally, specified as agen. LEA = load effective address. Could not
    # find the default for this instruction in the code.
    exeu lea {
      latency = 1
      rate = 1
      port_binding = {1}
    }
  }

  # Commit stage.
  commit_cfg {
    rob_size = 64           # Number of ROB entries.
    commit_width = 4        # Maximum uops committed per cycle.
    commit_branches = 0     # Maximum branches committed per cycle.
    precommit_depth = -1    # Atom pipeline depth (between exec and commit).
  }

}  # End of core cfg.

# Last level cache, FSB, DRAM, etc.
uncore_cfg {
  llccache_cfg llc {
    # General cache settings - size, associativity, line size, etc.
    config = "LLC:2048:16:64:16:64:12:L:W:B:8:1:8:C"
    # Cache coherency controller configuration.
    coherency_controller = "none"
    mshr_cmd = "RPWB"            # MSHR configuration.
    clock = 800                  # Cache clock frequency (MHz).

    llcprefetch_cfg llc_pf {
      config = {"none"}          # last-level cache prefetcher configuration
      on_miss_only = false       # LLC prefetch on miss only
      fifosize = 16              # Prefetch FIFO size (TODO: units?)
      buffer = 0                 # Prefetch buffer size.
      filter = 0                 # Prefetch filter size.
      filter_reset = 65536       # Prefetch filter reset interval (cycles).
      # Prefetch threshold - only prefetch if MSHR occupancy is less than
      # this.
      threshold = 4
      # Maximum instruction prefetch requests in the MSHR
      max_outstanding_requests = 2
      # Sampling interval (cycles) for prefetch control. 0 = no PF controller.
      watermark_sampling_interval = 100
      # Minimum watermark - always prefetch if lower than this.
      watermark_min = 0.1
      # Maximum watermark - never prefetch if above this.
      watermark_max = 0.5
    }
  }

  fsb_cfg {
    width = 4           # FSB bus width (Bytes).
    ddr = false         # FSB double pumped data.
    clock = 100.0       # FSB bus clock frequency (MHz).
    magic = false       # FSB unlimited bandwdidth.
  }

  dram_cfg {
    memory_controller_config = "simple:4:1"
    dram_config = "simplescalar:80"
  }

  dvfs_cfg {
    # DVFS controller configuration.
    config = "none"
    # Re-evaluate voltage/freq choice every X cycles.
    interval = 0
  }

  # OS scheduler and core allocator.
  scheduler_cfg {
    scheduler_tick = 0                   # Scheduler refresh in cycles.
    allocator = "gang"                   # Core allocation algorithm.
    allocator_opt_target = "throughput"  # Core allocation optimization target.
    speedup_model = "linear"             # Core allocation speedup model.
  }
}  # End of uncore configs.
